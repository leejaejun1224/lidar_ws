// Generated by gencpp from file local_pkg/Serial_Info.msg
// DO NOT EDIT!


#ifndef LOCAL_PKG_MESSAGE_SERIAL_INFO_H
#define LOCAL_PKG_MESSAGE_SERIAL_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace local_pkg
{
template <class ContainerAllocator>
struct Serial_Info_
{
  typedef Serial_Info_<ContainerAllocator> Type;

  Serial_Info_()
    : auto_manual(0)
    , emergency_stop(0)
    , gear(0)
    , speed(0.0)
    , steer(0.0)
    , brake(0)
    , encoder()  {
    }
  Serial_Info_(const ContainerAllocator& _alloc)
    : auto_manual(0)
    , emergency_stop(0)
    , gear(0)
    , speed(0.0)
    , steer(0.0)
    , brake(0)
    , encoder(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _auto_manual_type;
  _auto_manual_type auto_manual;

   typedef int16_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef int16_t _gear_type;
  _gear_type gear;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _steer_type;
  _steer_type steer;

   typedef int32_t _brake_type;
  _brake_type brake;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _encoder_type;
  _encoder_type encoder;





  typedef boost::shared_ptr< ::local_pkg::Serial_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::local_pkg::Serial_Info_<ContainerAllocator> const> ConstPtr;

}; // struct Serial_Info_

typedef ::local_pkg::Serial_Info_<std::allocator<void> > Serial_Info;

typedef boost::shared_ptr< ::local_pkg::Serial_Info > Serial_InfoPtr;
typedef boost::shared_ptr< ::local_pkg::Serial_Info const> Serial_InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::local_pkg::Serial_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::local_pkg::Serial_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::local_pkg::Serial_Info_<ContainerAllocator1> & lhs, const ::local_pkg::Serial_Info_<ContainerAllocator2> & rhs)
{
  return lhs.auto_manual == rhs.auto_manual &&
    lhs.emergency_stop == rhs.emergency_stop &&
    lhs.gear == rhs.gear &&
    lhs.speed == rhs.speed &&
    lhs.steer == rhs.steer &&
    lhs.brake == rhs.brake &&
    lhs.encoder == rhs.encoder;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::local_pkg::Serial_Info_<ContainerAllocator1> & lhs, const ::local_pkg::Serial_Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace local_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::local_pkg::Serial_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_pkg::Serial_Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_pkg::Serial_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_pkg::Serial_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_pkg::Serial_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_pkg::Serial_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::local_pkg::Serial_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "288e1038c233a85b428a641389cf9e85";
  }

  static const char* value(const ::local_pkg::Serial_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x288e1038c233a85bULL;
  static const uint64_t static_value2 = 0x428a641389cf9e85ULL;
};

template<class ContainerAllocator>
struct DataType< ::local_pkg::Serial_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "local_pkg/Serial_Info";
  }

  static const char* value(const ::local_pkg::Serial_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::local_pkg::Serial_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 auto_manual\n"
"int16 emergency_stop\n"
"int16 gear\n"
"float32 speed\n"
"float32 steer\n"
"int32 brake\n"
"float64[] encoder\n"
;
  }

  static const char* value(const ::local_pkg::Serial_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::local_pkg::Serial_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_manual);
      stream.next(m.emergency_stop);
      stream.next(m.gear);
      stream.next(m.speed);
      stream.next(m.steer);
      stream.next(m.brake);
      stream.next(m.encoder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Serial_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::local_pkg::Serial_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::local_pkg::Serial_Info_<ContainerAllocator>& v)
  {
    s << indent << "auto_manual: ";
    Printer<int16_t>::stream(s, indent + "  ", v.auto_manual);
    s << indent << "emergency_stop: ";
    Printer<int16_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "gear: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gear);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "brake: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake);
    s << indent << "encoder[]" << std::endl;
    for (size_t i = 0; i < v.encoder.size(); ++i)
    {
      s << indent << "  encoder[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.encoder[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCAL_PKG_MESSAGE_SERIAL_INFO_H
